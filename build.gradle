import java.text.SimpleDateFormat

plugins {
    id("org.springframework.boot") version '2.2.6.RELEASE'
    id("io.spring.dependency-management") version '1.0.9.RELEASE'
    id("org.owasp.dependencycheck") version "6.2.2"

    id 'checkstyle'
    id 'pmd'
    id "com.github.spotbugs" version "4.6.0"
}
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'


apply from: "${rootDir}/build-support/quality.gradle"
// apply from: "${rootDir}/build-support/integration-test/idea.gradle"

version = "0.1"
group = "io.cyberia.example"

repositories {
    mavenCentral()
    jcenter()
}

task buildInformation {
    def gitSha = "git rev-parse --short HEAD"
    def dateFormat = new SimpleDateFormat("yyyyMMddHHmmss")
    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
    def rpmRevisionTimestamp = dateFormat.format(new Date())

    ext.timestamp = rpmRevisionTimestamp
    ext.revision = gitSha.execute().text.trim()
}

java {
    sourceCompatibility = JavaVersion.toVersion("14")
    targetCompatibility = JavaVersion.toVersion("14")
}

allprojects {
    apply plugin: 'idea'
    group 'io.cyberia.example'
    version '1.0-SNAPSHOT'
    repositories {
        mavenCentral()
    }
}

ext {
    cqrsModules = [project('domain'), project('api'), project('app'), project('domain-infrastructure')]
    testSupportModules = [project('test-support')]
    domainInfrastructureModules = [project('domain-infrastructure')]
    appModules = [project('app')]
    httpWebModules = [project('api')]
}

configure(cqrsModules) {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'

//     apply from: "${rootDir}/build-support/integration-test/idea.gradle"
//     apply from: "${rootDir}/build-support/integration-test/db-support.gradle"
    apply from: "${rootDir}/build-support/quality.gradle"
    apply plugin: 'org.owasp.dependencycheck'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
//         compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: "${springBootVersion}"
//         compile group: 'org.hibernate.validator', name: 'hibernate-validator', version: "6.0.10.Final"
        compile 'org.modelmapper:modelmapper:2.3.0'
        compile group:'org.springframework.boot', name:'spring-boot-starter-actuator', version:"${springBootVersion}"
//         compile ("org.springframework.security:spring-security-config:${springSecurityVersion}") {
//             exclude group: "org.springframework"
//         }
        compile group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: "1.5.1"
        compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.9'

        testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springBootVersion}"
        testRuntime group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: "${springBootVersion}"
        testCompile project(':test-support')
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    }

    test {
        useJUnitPlatform()
    }

//     integrationTest {
//         useJUnitPlatform()
//     }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }


}
configure(httpWebModules) {
    dependencies {
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
//         integrationTestAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
//         integrationTestCompile group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
        compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
            exclude module: 'spring-boot-starter-logging'
        }

//         compile ("org.springframework.boot:spring-boot-starter-oauth2-resource-server:${springBootVersion}"){
//             exclude group: "org.springframework"
//         }
        compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
        compile project(':app')
    }
}
configure(domainInfrastructureModules) {
    dependencies {
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

//         compile("org.springframework.boot:spring-boot-starter-integration:${springBootVersion}")
//         compile "org.springframework.integration:spring-integration-http:${springIntegrationSpringBoot212Release}"
//         compile("org.springframework.integration:spring-integration-aws:${springIntegrationAWSSpringBoot212Release}")
//         compile("org.springframework.integration:spring-integration-file:${springIntegrationSpringBoot212Release}")
//         compile("org.springframework.cloud:spring-cloud-aws-messaging:${springCloudVersion}")
//         compile("org.springframework.boot:spring-boot-starter-cache:${springBootVersion}")
//         compile("com.github.ben-manes.caffeine:caffeine:2.7.0")

        compile "org.springframework.boot:spring-boot-starter-hateoas:$springBootVersion"
        compile 'org.modelmapper:modelmapper:2.3.0'

//         compile group: 'org.postgresql', name: 'postgresql', version: '42.2.2'
//         compile "org.flywaydb:flyway-core:5.2.0"

        compile project(':domain')
    }
}
configure(appModules) {
    dependencies {
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

        compile project(':domain-infrastructure')
    }
}
configure(testSupportModules) {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    apply plugin: 'java'

//     apply from: "${rootDir}/build-support/integration-test/idea.gradle"
//     apply from: "${rootDir}/build-support/integration-test/db-support.gradle"
    apply from: "${rootDir}/build-support/quality.gradle"
    apply plugin: 'org.owasp.dependencycheck'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springBootVersion}"
//         compile ("org.springframework.security:spring-security-config:${springSecurityVersion}") {
//             exclude group: "org.springframework"
//         }

        compile 'org.mockito:mockito-core:2.15.0'
        compile 'org.apache.commons:commons-lang3:3.9'
        compile 'org.hamcrest:hamcrest-library:2.1'
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }


}


bootJar {
    enabled = false
}

apply from: './docker.gradle'
apply from: "${rootDir}/contracts/build.gradle"